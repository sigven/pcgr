### Variant classification - oncogenicity

Annotations for short variants (SNVs/InDels) detected in the tumor sample can here be interrogated, e.g. with respect to gene, variant consequence, variant allelic fraction/sequencing depth (if provided as input), and also with respect to _predicted oncogenicity_. For the latter, PCGR implements standard operating procedures for oncogenicity evaluation developed by ClinGen/CGC/VICC [@Horak2022-uh]. 

The tabset below provides an overview of coding (protein-altering) versus non-coding variants found in the tumor sample. The user should carefully consider oncogenicity predictions alongside existing variant classifications (any origin (somatic/germline), any phenotype), highlighted through different background colors of the _ALTERATION_ column:
  
   -  <span style="background-color:#FF8790; line-height:110%; padding:2x; color:white"><b>&nbsp;Variants of pathogenic/likely pathogenic significance (ClinVar) &nbsp; </b></span>
   - <span style="background-color:black; line-height:110%; padding:2x; color:white"><b>&nbsp;Variants of uncertain significance or with conflicting evidence (ClinVar) &nbsp; </b></span>
   - <span style="background-color:#65a058; line-height:110%; padding:2x; color:white"><b>&nbsp;Variants of benign/likely benign significance (ClinVar) &nbsp; </b></span>

::: {.callout-note collapse="true"}

## Note - output limitations

In order to maintain responsiveness of client-side data interaction, a maximum of __N = 1000__ variants are shown in the tables below (coding and non-coding variants). For a complete list of variants, please refer to the TSV output or Excel workbook that is generated by PCGR.

:::

::: {.callout-note collapse="true"}

## Note - oncogenicity versus actionability

The oncogenicity classification of variants performed in PCGR is based on an implementation of the ClinGen/CGC/VICC SOPs for variant oncogenicity evaluation. This classification is based on multiple properties of variants (hotspot occurrence, variant consequence (i.e. loss-of-function), population frequency etc.). Notably, the current implementation may provide classifications that do not always correspond with clinical actionability, e.g. due to the fact the functional variant evidence (frequently requiring manual curation) is limited in the reference data coming with PCGR. This implies that the oncogenic classification is somewhat conservative in its current form, and that variants classified as VUS when it comes to oncogenicity by PCGR (yet still with a relatively high _oncogenicity score_), may still be listed as actionable below.

:::

<br>

::: {.panel-tabset}

#### Coding variants

```{r coding_variants}
#| output: asis
#| eval: !expr as.logical(pcg_report$content$snv_indel$vstats$n_coding != 0) == TRUE

coding_variant_set <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::filter(.data$CODING_STATUS == "coding") |>
  dplyr::select(
    dplyr::any_of(
      pcgrr::dt_display$snv_indel_tier3
    )
  ) |>
  dplyr::select(
    -dplyr::any_of(
      c("VEP_ALL_CSQ"))) |>
 dplyr::arrange(
    dplyr::desc(.data$ONCOGENICITY_SCORE),
    dplyr::desc(.data$TISSUE_ASSOC_RANK),
    dplyr::desc(.data$GLOBAL_ASSOC_RANK),
  ) |>
  utils::head(1000)


if(NROW(coding_variant_set[!is.na(coding_variant_set$ONCOGENICITY) &
                           coding_variant_set$ONCOGENICITY == "VUS",]) > 0){
  coding_variant_set <- coding_variant_set |>
    dplyr::mutate(onc_vus_path_clinvar = dplyr::if_else(
      !is.na(ONCOGENICITY) &
        ONCOGENICITY == "VUS" &
        !is.na(CLINVAR_CLASSIFICATION) &
        stringr::str_detect(
          tolower(CLINVAR_CLASSIFICATION),
          "pathogenic"
        ),
      as.integer(1),
      as.integer(0)
    ))
  
  coding_variant_set[!is.na(coding_variant_set$ONCOGENICITY) &
                       coding_variant_set$ONCOGENICITY == "VUS",] <- 
    coding_variant_set[!is.na(coding_variant_set$ONCOGENICITY) &
                         coding_variant_set$ONCOGENICITY == "VUS",] |>
    dplyr::arrange(dplyr::desc(onc_vus_path_clinvar),
                   dplyr::desc(ONCOGENICITY_SCORE))
  coding_variant_set$onc_vus_path_clinvar <- NULL
  
}


# if(expression_present_snv == FALSE){
#   coding_variant_set$consTPM <- NULL
# }

coding_variants_shared <- 
  crosstalk::SharedData$new(coding_variant_set)


filter_set1 <- list()
filter_set2 <- list()

filter_set1[[1]] <- crosstalk::filter_select(
  "SYMBOL", "Gene", coding_variants_shared, ~SYMBOL)
filter_set1[[2]] <- crosstalk::filter_select(
  "ONCOGENICITY", "Oncogenicity", coding_variants_shared, ~ONCOGENICITY)
filter_set1[[3]] <- crosstalk::filter_slider(
  "ONCOGENICITY_SCORE", "Oncogenicity score", coding_variants_shared, ~ONCOGENICITY_SCORE)
filter_set2[[1]] <- crosstalk::filter_select(
  "CONSEQUENCE", "Consequence", coding_variants_shared, ~CONSEQUENCE)
filter_set2[[2]] <- crosstalk::filter_select(
  "MUTATION_HOTSPOT", "Mutation hotspot", coding_variants_shared, ~MUTATION_HOTSPOT)

i_set1 <- 4
i_set2 <- 3
if(any(!is.na(coding_variant_set$CALL_CONFIDENCE))){
  filter_set2[[i_set2]] <- crosstalk::filter_select(
    "CALL_CONFIDENCE", 
    "Call confidence", 
    coding_variants_shared, 
    ~CALL_CONFIDENCE)
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_TUMOR)) & 
   any(!is.na(coding_variant_set$VAF_TUMOR))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_TUMOR", "Sequencing depth tumor", 
    coding_variants_shared, ~DP_TUMOR, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_TUMOR", "Allelic fraction tumor", 
    coding_variants_shared, ~VAF_TUMOR, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
  i_set1 <- i_set1 + 1
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_CONTROL)) & 
   any(!is.na(coding_variant_set$VAF_CONTROL))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_CONTROL", "Sequencing depth control", 
    coding_variants_shared, ~DP_CONTROL, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_CONTROL", "Allelic fraction control", 
    coding_variants_shared, ~VAF_CONTROL, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
}

crosstalk::bscols(
  filter_set1,
  filter_set2
)

dt_all_coding <- DT::datatable(
  coding_variants_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    "ONCOGENICITY",
    "ONCOGENICITY",
    backgroundColor = 
      DT::styleEqual(
        pcgrr::color_palette$oncogenicity$levels,
        pcgrr::color_palette$oncogenicity$values
      )
  ) |>
  DT::formatStyle(
    "SYMBOL",
    "TISSUE_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  ) |>
   DT::formatStyle(
    color = DT::styleEqual(
      c("Pathogenic","Likely_Pathogenic","VUS","Likely_Benign","Benign"),
      c("white", "white", "white","white","white")),
    "ALTERATION",
    "CLINVAR_CLASSIFICATION",
    backgroundColor = 
      DT::styleEqual(
        c("Pathogenic","Likely_Pathogenic","VUS","Likely_Benign","Benign"),
        c("#FF8790", "#FF8790","#000000","#65a058","#65a058")
      )
  )

if(pcg_report$settings$conf$sample_properties$site == "Any"){
  dt_all_coding <- dt_all_coding |>
    DT::formatStyle(
    "SYMBOL",
    "GLOBAL_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  )
  
}


# if(expression_present_snv == TRUE){
#   dt_all_coding <- dt_all_coding |>
#     DT::formatStyle(
#      "consTPM",
#      "consTPM", 
#      color = "white", 
#      backgroundColor = 
#        DT::styleInterval(
#          pcgrr::color_palette$gene_expression$breaks,
#          pcgrr::color_palette$gene_expression$values
#        )
#    )
# }

dt_all_coding


```


#### Non-coding variants

```{r }
#| output: asis
#| eval: !expr as.logical(pcg_report$content$snv_indel$vstats$n_noncoding > 0) == TRUE

noncoding_variant_set <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::filter(
    .data$CODING_STATUS == "noncoding" &
     .data$CONSEQUENCE != "intergenic_variant") |>
  dplyr::select(
    dplyr::any_of(
      pcgrr::dt_display$snv_indel_tier3
    )
  ) |>
  dplyr::select(
    -dplyr::any_of(
      c("PROTEIN_CHANGE",
         "PROTEIN_DOMAIN",
         "MUTATION_HOTSPOT",
         "MUTATION_HOTSPOT_CANCERTYPE",
         "TARGETED_INHIBITORS",
         "TARGETED_INHIBITORS_ALL",
         "VEP_ALL_CSQ"))) |>
  dplyr::select(
    c("SYMBOL",
      "ALTERATION",
      "GENENAME",
      "CONSEQUENCE",
      "ONCOGENICITY",
      "COSMIC_ID",
      "LOSS_OF_FUNCTION"),
    dplyr::everything()
  ) |>
 dplyr::arrange(
    dplyr::desc(.data$ONCOGENICITY_SCORE),
    dplyr::desc(.data$TISSUE_ASSOC_RANK),
    dplyr::desc(.data$GLOBAL_ASSOC_RANK),
  ) |>
  utils::head(1000)


if(NROW(noncoding_variant_set[!is.na(noncoding_variant_set$ONCOGENICITY) &
                           noncoding_variant_set$ONCOGENICITY == "VUS",]) > 0){
  noncoding_variant_set <- noncoding_variant_set |>
    dplyr::mutate(onc_vus_path_clinvar = dplyr::if_else(
      !is.na(.data$ONCOGENICITY) &
        .data$ONCOGENICITY == "VUS" &
        !is.na(.data$CLINVAR_CLASSIFICATION) &
        stringr::str_detect(
          tolower(.data$CLINVAR_CLASSIFICATION),
          "pathogenic"
        ),
      as.integer(1),
      as.integer(0)
    ))
  
  noncoding_variant_set[!is.na(noncoding_variant_set$ONCOGENICITY) &
                       noncoding_variant_set$ONCOGENICITY == "VUS",] <- 
    noncoding_variant_set[!is.na(noncoding_variant_set$ONCOGENICITY) &
                         noncoding_variant_set$ONCOGENICITY == "VUS",] |>
    dplyr::arrange(dplyr::desc(onc_vus_path_clinvar),
                   dplyr::desc(ONCOGENICITY_SCORE))
  noncoding_variant_set$onc_vus_path_clinvar <- NULL
  
}

# if(expression_present_snv == FALSE){
#   noncoding_variant_set$consTPM <- NULL
# }

noncoding_variants_shared <- 
  crosstalk::SharedData$new(noncoding_variant_set)


filter_set1 <- list()
filter_set2 <- list()

filter_set1[[1]] <- crosstalk::filter_select(
  "SYMBOL", "Gene", noncoding_variants_shared, ~SYMBOL)
filter_set2[[1]] <- crosstalk::filter_select(
  "CONSEQUENCE", "Consequence", noncoding_variants_shared, ~CONSEQUENCE)

i_set1 <- 2
i_set2 <- 2
if(any(!is.na(noncoding_variant_set$CALL_CONFIDENCE))){
  filter_set2[[i_set2]] <- crosstalk::filter_select(
    "CALL_CONFIDENCE", 
    "Call confidence", noncoding_variants_shared, ~CALL_CONFIDENCE)
  i_set2 <- i_set2 + 1
}

if(any(!is.na(noncoding_variant_set$DP_TUMOR)) & 
   any(!is.na(noncoding_variant_set$VAF_TUMOR))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_TUMOR", "Sequencing depth tumor", 
    noncoding_variants_shared, ~DP_TUMOR, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_TUMOR", "Allelic fraction tumor", 
    noncoding_variants_shared, ~VAF_TUMOR, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
  i_set1 <- i_set1 + 1
  i_set2 <- i_set2 + 1
}

if(any(!is.na(noncoding_variant_set$DP_CONTROL)) & 
   any(!is.na(noncoding_variant_set$VAF_CONTROL))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_CONTROL", "Sequencing depth control", 
    noncoding_variants_shared, ~DP_CONTROL, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_CONTROL", "Allelic fraction control", 
    noncoding_variants_shared, ~VAF_CONTROL, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
}

crosstalk::bscols(
  filter_set1,
  filter_set2
)

dt_all_noncoding <- DT::datatable(
  noncoding_variants_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    "ONCOGENICITY",
    "ONCOGENICITY",
    backgroundColor = 
      DT::styleEqual(
        pcgrr::color_palette$oncogenicity$levels,
        pcgrr::color_palette$oncogenicity$values
      )
  ) |>
  DT::formatStyle(
    "SYMBOL",
    "TISSUE_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  ) |>
  DT::formatStyle(
    color = DT::styleEqual(
      c("Pathogenic","Likely_Pathogenic","VUS","Likely_Benign","Benign"),
      c("white", "white", "white","white","white")),
    "ALTERATION",
    "CLINVAR_CLASSIFICATION",
    backgroundColor = 
      DT::styleEqual(
        c("Pathogenic","Likely_Pathogenic","VUS","Likely_Benign","Benign"),
        c("#FF8790", "#FF8790","#000000","#65a058","#65a058")
      )
  )

if(pcg_report$settings$conf$sample_properties$site == "Any"){
  dt_all_noncoding <- dt_all_noncoding |>
    DT::formatStyle(
    "SYMBOL",
    "GLOBAL_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  )
}

# if(expression_present_snv == TRUE){
#   dt_all_noncoding <- dt_all_noncoding |>
#     DT::formatStyle(
#      "consTPM",
#      "consTPM", 
#      color = "white", 
#      backgroundColor = 
#        DT::styleInterval(
#          pcgrr::color_palette$gene_expression$breaks,
#          pcgrr::color_palette$gene_expression$values
#        )
#    )
# }
dt_all_noncoding

```

```{r show_filtered_variants}
#| output: asis
#| eval: !expr as.logical(pcg_report$settings$conf$assay_properties$vcf_tumor_only) == TRUE

cat("\n#### Filtered variants\n\n")
cat("The table below lists all the variants that have been subject to",
    " exclusion/filtering (according to filtering settings indicated above)",
    " from the raw input callset, as an effort to minimize the presence of known",
    " germline events and sequencing artifacts.\n\n")


```

<br>

```{r num_filtered_variants_shown}
#| output: asis
#| eval: !expr as.logical(pcg_report$settings$conf$assay_properties$vcf_tumor_only) == TRUE

if(NROW(pcg_report$content$snv_indel$callset$variant_unfiltered) > 0 &
   "SOMATIC_CLASSIFICATION" %in% colnames(pcg_report$content$snv_indel$callset$variant_unfiltered)){
  
  filtered_calls <- 
    pcg_report$content$snv_indel$callset$variant_unfiltered |>
    dplyr::filter(.data$SOMATIC_CLASSIFICATION != "SOMATIC") |>
    dplyr::rename(EXCLUSION_CRITERIA = "SOMATIC_CLASSIFICATION")
  
  if(NROW(filtered_calls) > 2000){
    cat("\n::: {.callout-warning}\n## Filtered variant set too large for display\n\n",
        "The number of variants subject to filtering <b>(N = ", NROW(filtered_calls), ")</b> ",
        "is too large (N > 2,000) to display in an interactive table. See the output TSV file ",
        "with all filtered (and unfiltered variants) for the full list.\n\n",
        ":::\n\n", sep="")
  }
}

```


```{r filtered_variants_datatable}
#| output: asis
#| eval: !expr as.logical(pcg_report$settings$conf$assay_properties$vcf_tumor_only) == TRUE

if(NROW(pcg_report$content$snv_indel$callset$variant_unfiltered) > 0 &
   "SOMATIC_CLASSIFICATION" %in% colnames(pcg_report$content$snv_indel$callset$variant_unfiltered)){
  
  filtered_calls <- 
    pcg_report$content$snv_indel$callset$variant_unfiltered |>
    dplyr::filter(.data$SOMATIC_CLASSIFICATION != "SOMATIC") |>
    dplyr::rename(EXCLUSION_CRITERIA = "SOMATIC_CLASSIFICATION")
  
  if(NROW(filtered_calls) > 0 & NROW(filtered_calls) <= 2000 ){
    filtered_calls <- filtered_calls |>
      dplyr::select(
        dplyr::any_of(
          pcgrr::dt_display$snv_indel_germline_filtered
        )
      ) |>
      dplyr::distinct()
    
    DT::datatable(
      filtered_calls,
      escape = F, 
      extensions = c("Buttons","Responsive"), 
      options = list(
        buttons = c('csv','excel'), 
        dom = 'Bfrtip')) |>
      DT::formatStyle(
        color = "white",
        "EXCLUSION_CRITERIA",
        "EXCLUSION_CRITERIA",
        backgroundColor = pcgrr::color_palette$report_color$values[2]
      )
  }
}
```

:::

<br>
