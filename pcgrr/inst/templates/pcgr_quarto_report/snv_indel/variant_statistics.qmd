```{r prep_varstats_data}
#| eval: !expr as.logical(pcg_report$content$snv_indel$vstats$n > 0) == TRUE


variant_stats <- pcgrr::get_variant_statistics(
  var_df = pcg_report$content$snv_indel$callset$variant_display,
  pct_other_limit = 3.5
)

hole_size <- 0.4
pie_line_width <- 3
t <- list(
  family = "Helvetica",
  size = 15)

varstats_plots_plotly <- list()
varstats_plots_plotly[['coding']] <-
  pcgrr::plotly_pie_chart(
    df_variant_stats = variant_stats[['coding']],
    category = 'CODING_STATUS'
  )

varstats_plots_plotly[['consequence']] <- 
  pcgrr::plotly_pie_chart(
    df_variant_stats = variant_stats[['consequence']],
    category = 'CONSEQUENCE'
  )

varstats_plots_plotly[['consequence_coding']] <- NULL
if(NROW(variant_stats[['consequence_coding']]) > 0) {
  
  varstats_plots_plotly[['consequence_coding']] <- 
    pcgrr::plotly_pie_chart(
      df_variant_stats = variant_stats[['consequence_coding']],
      category = 'CONSEQUENCE'
    )
}

varstats_plots_plotly[['variant_class']] <- 
  pcgrr::plotly_pie_chart(
      df_variant_stats = variant_stats[['variant_class']],
      category = 'VARIANT_CLASS'
    )


```

```{r display_varstats}
#| output: asis
#| echo: false
#| eval: true

bslib::page_fillable(
  bslib::layout_columns(
    height = "365px",
    bslib::card(
      full_screen = TRUE,
      height = "365px",
      bslib::card_header(
        class = "bg-dark", 
        paste0("Variant statistics | coding effect - ",
               pcg_report$settings$sample_id)),
      varstats_plots_plotly[['coding']]
    ),
    bslib::card(
      full_screen = TRUE,
      height = "365px",
      bslib::card_header(
        class = "bg-dark", 
        paste0("Variant statistics | type - ",
               pcg_report$settings$sample_id)),
      varstats_plots_plotly[['variant_class']]
    )
  ),
  bslib::card(
    full_screen = TRUE,
    height = "400px",
    bslib::card_header(
      class = "bg-dark",
      paste0("Variant statistics | any consequence type - ",
             pcg_report$settings$sample_id)),
    varstats_plots_plotly[['consequence']]
  )
)


```

```{r display_coding_cons_varstats}
#| output: asis
#| echo: false
#| eval: !expr as.logical(is.null(varstats_plots_plotly[['consequence_coding']])) == FALSE

bslib::page_fillable(
  bslib::card(
    full_screen = TRUE,
    height = "400px",
    bslib::card_header(
      class = "bg-dark",
      paste0("Variant statistics | coding consequence type - ",
             pcg_report$settings$sample_id)),
    varstats_plots_plotly[['consequence_coding']]
  )
)


```


```{r vaf_plot}
#| echo: false
#| eval: !expr as.logical(pcg_report$settings$conf$somatic_snv$allelic_support$tumor_af_tag == "_NA_") == FALSE & as.logical(any(is.na(pcg_report$content$snv_indel$callset$variant$VAF_TUMOR))) == FALSE

bslib::card(
  height = "330px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Distribution - variant allelic fraction - ",
      pcg_report$settings$sample_id)
  ),
  pcgrr::vaf_plot(report = pcg_report)
  #vaf_plot_plotly
)

```


```{r prepare_genomic_distribution_plot}
#| eval: !expr pcg_report$content$rainfall$eval == TRUE  & NROW(pcg_report$content$rainfall$rfdata$data) > 0
#| echo: false

## retrieve rainfall data
rfdat <- pcg_report$content$rainfall$rfdata

## set size of text and points in plot
cex <- 0.8
cex_text <- 3

# make rainfall plot with rfdat

type_stats <- plyr::count(rfdat$data$type) |>
  dplyr::arrange(desc(freq))

rfdat$data$type <- factor(
  rfdat$data$type, levels = type_stats$x)

genomic_dist_plot <- ggplot2::ggplot(
  rfdat$data, ggplot2::aes(x = location, y = dist2prev, z = variant_id)) +
    ggplot2::geom_point(
      ggplot2::aes(colour = type), cex = rfdat$cex) +
    ggplot2::geom_vline(
      xintercept = as.vector(rfdat$chr_cum), linetype="dotted") +
    ggplot2::annotate("text", x = rfdat$chrom_midpoints, 
                      #y = rfdat$ylim,
                      y = 1e+09,
                      label = rfdat$chrom_labels, 
                      cex = rfdat$cex_text) +
    ggplot2::xlab("Genomic Location") +
    ggplot2::ylab("Genomic Distance") +
    ggplot2::scale_y_log10() +
    ggplot2::scale_colour_manual(values = rfdat$colors) +
    ggplot2::scale_x_continuous(
      expand = c(0,0), limits=c(0, max(rfdat$chr_cum))) +
    ggplot2::theme_bw() +
    ggplot2::theme(
      legend.position = "bottom",
      legend.title = ggplot2::element_blank(),
      legend.key = ggplot2::element_blank(),
      panel.grid.minor.x = ggplot2::element_blank(),
      panel.grid.major.x = ggplot2::element_blank(),
      axis.ticks.x = ggplot2::element_blank(),
      axis.text.x = ggplot2::element_blank()) +
    ggplot2::guides(colour = ggplot2::guide_legend(nrow = 1))

genomic_dist_plot_plotly <- plotly::ggplotly(genomic_dist_plot, tooltip = c("y","z"))
genomic_dist_plot_plotly$x$layout$legend$title$text <- ""
genomic_dist_plot_plotly <- genomic_dist_plot_plotly |> 
  plotly::layout(
    legend = list(
      orientation = "h", 
      x = 0.27, 
      y = -0.30))
  

```


```{r genomic_dist_plot}
#| eval: !expr pcg_report$content$rainfall$eval == TRUE  & NROW(pcg_report$content$rainfall$rfdata$data) > 0

bslib::card(
  height = "300px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Distribution - genomic location - ",
      pcg_report$settings$sample_id)
  ),
  genomic_dist_plot_plotly
)

```


